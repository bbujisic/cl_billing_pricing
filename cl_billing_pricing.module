<?php

/**
 * @file Module for providing per-license and per-user pricing logic to
 * Commerce License Billing.
 */

define("COMMERCE_LICENSE_BILLING_PRICING_CUSTOM_TYPE", 'custom');

/**
 * Implements hook_views_api().
 */
function cl_billing_pricing_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'cl_billing_pricing') . '/views',
  );
}

/**
 * Implements hook_permission().
 */
function cl_billing_pricing_permission() {
  return array(
    'view billing pricing field' => array(
      'title' => t('View Billing Pricing field'),
      'description' => t('Access the Commerce License Billing Pricing field widget'),
    ),
  );
}

/********** Field Type API Hooks **********/

/**
 * Implements hook_field_info().
 *
 * This field type provides a multi-faceted way of interacting with the pricing
 * logic of recurring license line items generated by Commerce License Billing.
 *
 * As with Commerce License Billing, we abbreviate to cl_ to save space on our
 * machine names.
 */
function cl_billing_pricing_field_info() {
  $items = array();

  $items['cl_billing_pricing'] = array(
    'label' => t('Recurring license pricing options'),
    'description' => t('This field stores a variety of options used to price recurring license line items.'),
    'settings' => array(),
    'instance_settings' => array(),
    'default_widget' => 'cl_billing_pricing_select',
    'default_formatter' => 'hidden',
    'property_type' => 'cl_billing_pricing',
    'property_callbacks' => array('cl_billing_pricing_property_info_callback'),
  );

  return $items;
}

/**
 * Callback to alter the property info of cl_billing_pricing fields.
 *
 * @see cl_billing_pricing_field_info().
 */
function cl_billing_pricing_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $name = $field['field_name'];
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$name];

  $property['type'] = 'list<cl_billing_pricing>';
  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  $property['property info'] = cl_billing_pricing_data_property_info();

  unset($property['query callback']);
}

/**
 * Defines info for the properties of the cl_billing_pricing field data structure.
 */
function cl_billing_pricing_data_property_info($name = NULL) {
  // Build an array of basic property information for the cl_billing_pricing field.
  $properties = array(
    'condition' => array(
      'label' => t('Condition'),
    ),
    'action' => array(
      'label' => t('Action'),
    ),
    'data' => array(
      'label' => t('Data'),
    ),
    'expires' => array(
      'label' => t('Expires'),
    ),
    'weight' => array(
      'label' => t('Weight'),
    ),
  );

  // Add the default values for each of the field properties.
  foreach ($properties as &$value) {
    $value += array(
      'description' => !empty($name) ? t('!label of field %name', array('!label' => $value['label'], '%name' => $name)) : '',
      'type' => 'text',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    );
  }

  return $properties;
}

/**
 * Implements hook_field_access().
 */
function cl_billing_pricing_field_access($op, $field, $entity_type, $entity, $account) {
  if ($field['type'] == 'cl_billing_pricing') {
    return user_access('view billing pricing field');
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * The pricing options field type is always FIELD_CARDINALITY_UNLIMITED.
 */
function cl_billing_pricing_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  if ($form['#field']['type'] == 'cl_billing_pricing') {
    // Hide the cardinality setting on the field settings for properties fields.
    $form['field']['cardinality']['#default_value'] = FIELD_CARDINALITY_UNLIMITED;
    $form['field']['cardinality']['#value'] = FIELD_CARDINALITY_UNLIMITED;
    $form['field']['#access'] = FALSE;
  }
}

/**
 * Implements hook_field_instance_settings_form().
 */
function cl_billing_pricing_field_instance_settings_form($field, $instance) {
  if ($instance['entity_type'] != 'license') {
    // If the instance is not a license entity, then we need to pick which license
    // types it regards as valid so that plans and usage groups can be summoned
    // appropriately.
    $types = &drupal_static(__FUNCTION__, array());
    // We can't re-use commerce_license_types_allowed_values() here because it
    // requires an individual entity for its alter hook. Oh well.
    if (empty($types)) {
      foreach (commerce_license_get_type_plugins() as $plugin_name => $plugin_info) {
        if (empty($plugin_info['no ui'])) {
          $types[$plugin_name] = $plugin_info['title'];
        }
      }
    }
    $settings = $instance['settings'];
    $form['license_types'] = array(
      '#type' => 'select',
      '#multiple' => TRUE,
      '#options' => $types,
      '#default_value' => (!empty($settings['license_types']) ? $settings['license_types'] : NULL),
      '#title' => t('Valid License Types'),
    );
  }

  // We want to allow filtering out some of the licensable products.
  if(!empty($settings['license_types'])) {
    $license_types = ($instance['entity_type'] == 'commerce_license') ? array($instance['bundle']) : $settings['license_types'];
    $form['licensable_products'] = array(
      '#type' => 'select',
      '#multiple' => TRUE,
      '#options' => _cl_billing_pricing_get_product_options($license_types),
      '#title' => t('Licensable products'),
      '#description' => t('Include following products in Plans. If none selected, all available plans will be included.'),
      '#default_value' => (!empty($settings['licensable_products']) ? $settings['licensable_products'] : NULL),
    );
  }

  $form['component'] = array(
    '#type' => 'textfield',
    '#default_value' => (!empty($settings['component']) ? $settings['component'] : 'base_price'),
    '#title' => t('Price Component Key'),
    '#description' => t('Change the price component used to apply modifications generating by this field.'),
  );

  return $form;
}

/**
 * Implements hook_field_widget_info().
 */
function cl_billing_pricing_field_widget_info() {
  $items = array();

  $items['cl_billing_pricing_select'] = array(
    'label' => t('Recurring license pricing options'),
    'description' => t('Provides the state-driven multi-select widget for the CLB pricing field type.'),
    'field types' => array('cl_billing_pricing'),
    'settings' => array(),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      'default value' => FIELD_BEHAVIOR_NONE,
    ),
    'weight' => -20,
  );

  return $items;
}

/**
 * Implements hook_field_is_empty().
 */
function cl_billing_pricing_field_is_empty($item, $field) {
  return (empty($item['condition']) || empty($item['action']));
}

function cl_billing_pricing_field_widget_validate($element, &$form_state) {
  $item = array();

  $main = $element['condition']['main']['#value'];
  $item['condition'] = (!empty($element['condition'][$main]['#value']) ? "$main:" . $element['condition'][$main]['#value'] : $main);
  $item['action'] = $element['action']['#value'];
  // Getting the crap out of the "values" element is more complicated.
  $action = $item['action'];
  if (!empty($element['values'][$action])) {
    // This thing has a set of values.
    foreach (element_children($element['values'][$action]) as $child) {
      // We need extra work here to make certain fields behave like prices.
      if (!empty($element['values'][$action][$child]['#price_amount']) && $element['values'][$action][$child]['#value'] !== '') {
        if (!is_numeric($element['values'][$action][$child]['#value'])) {
          form_error($element['values'][$action][$child], t('%title: You must enter a numeric value for the price amount.', array('%title' => $element['values'][$action][$child]['#title'])));
        }
        else {
          // Convert the decimal entered to an integer-based amount. The
          // presence of #price_amount on the element will convert it back when
          // the form is rebuilt.
          $currency_field = $element['values'][$action][$child]['#currency_field'];
          $item['values'][$child] = commerce_currency_decimal_to_amount($element['values'][$action][$child]['#value'], $element['values'][$action][$currency_field]['#value']);
        }
      }
      else {
        // Everything else behaves normally.
        $item['values'][$child] = $element['values'][$action][$child]['#value'];
      }
    }
  }
  else {
    // This thing just uses the default as a single-value rather than array.
    $item['values'] = $element['values']['default']['#value'];
  }

  if(!empty($element['expires']['#value']['date'])) {
    // The action expires 86399 seconds after the beginning of expiry day in timezone of the website.
    $tz_user = date_default_timezone_get();
    $tz_site = variable_get('date_default_timezone', @date_default_timezone_get());
    date_default_timezone_set($tz_site);
    $item['expires'] = strtotime($element['expires']['#value']['date']) + 86399;
    date_default_timezone_set($tz_user);
  }
  else {
    $item['expires'] = NULL;
  }

  $item['weight'] = $element['weight']['#value'];

  foreach ($item as $key => $val) {
    form_set_value($element[$key], $val, $form_state);
  }
}

/**
 * Implements hook_field_load().
 */
function cl_billing_pricing_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => &$item) {
      if (!empty($item['data'])) {
        $item['values'] = unserialize($item['data']);
      }
      unset($item['data']);
    }
  }
}

/**
 * Implements hook_field_presave().
 */
function cl_billing_pricing_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as &$item) {
    $item['data'] = serialize($item['values']);
  }
}

/**
 * Implements hook_field_widget_form().
 *
 * Mostly taken from field_multiple_value_form and summons each item using the
 * cl_billing_pricing_field_item_form function. Extraneous pieces
 * such as per-item widget altering and weight/tabledrag removed.
 */
function cl_billing_pricing_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $field_name = $field['field_name'];
  $parents = $form['#parents'];

  // Determine the number of widgets to display.
  switch ($field['cardinality']) {
    case FIELD_CARDINALITY_UNLIMITED:
      $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);
      $max = $field_state['items_count'];
      break;

    default:
      $max = $field['cardinality'] - 1;
      break;
  }

  $title = check_plain($instance['label']);
  $description = field_filter_xss($instance['description']);

  $id_prefix = implode('-', array_merge($parents, array($field_name)));
  $wrapper_id = drupal_html_id($id_prefix . '-add-more-wrapper');

  $field_elements = array();
  for ($delta = 0; $delta <= $max; $delta++) {
    $multiple = $field['cardinality'] > 1 || $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED;
    $element = array(
      '#entity_type' => $instance['entity_type'],
      '#entity' => $form['#entity'],
      '#bundle' => $instance['bundle'],
      '#field_name' => $field_name,
      '#language' => $langcode,
      '#field_parents' => $parents,
      '#columns' => array_keys($field['columns']),
      // For multiple fields, title and description are handled by the wrapping table.
      '#title' => $multiple ? '' : $title,
      '#description' => $multiple ? '' : $description,
      // Only the first widget should be required.
      '#required' => $delta == 0 && $instance['required'],
      '#delta' => $delta,
      '#weight' => $delta,
    );
    $current_item = array(
      'values' => array(),
      'weight' => 50,
      'condition' => '',
      'action' => '',
      'expires' => '',
    );
    $current_item = !empty($items[$delta]) ? $items[$delta] : $current_item;
    if ($element = cl_billing_pricing_field_item_form($field, $instance, $langcode, $current_item, $delta, $element)) {
      $field_elements[$delta] = $element;
    }
  }

  if ($field_elements) {
    $field_elements += array(
      '#theme' => 'cl_billing_pricing_form',
      '#field_name' => $field['field_name'],
      '#cardinality' => $field['cardinality'],
      '#title' => $title,
      '#required' => $instance['required'],
      '#description' => $description,
      '#prefix' => '<div id="' . $wrapper_id . '">',
      '#suffix' => '</div>',
      '#max_delta' => $max,
    );
    // Add 'add more' button, if not working with a programmed form.
    if ($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED && empty($form_state['programmed'])) {
      $field_elements['add_more'] = array(
        '#type' => 'submit',
        '#name' => strtr($id_prefix, '-', '_') . '_add_more',
        '#value' => t('Add Action'),
        '#attributes' => array('class' => array('field-add-more-submit')),
        '#limit_validation_errors' => array(array_merge($parents, array($field_name, $langcode))),
        '#submit' => array('field_add_more_submit'),
        '#ajax' => array(
          'callback' => 'field_add_more_js',
          'wrapper' => $wrapper_id,
          'effect' => 'fade',
        ),
      );
    }
  }

  return $field_elements;
}

/**
 * Item subcomponent of the field widget form.
 */
function cl_billing_pricing_field_item_form($field, $instance, $langcode, $current_item, $delta, $base_element) {
  if ($field['type'] != 'cl_billing_pricing') {
    // This shouldn't ever happen!
    return;
  }

  // Gather available condition types for this field and instance.
  $available_conditions = cl_billing_pricing_conditions($instance);
  $input_name_base = $field['field_name'] . '[' . implode('][', array($langcode, $delta)) . ']';

  $item_form = $base_element;
  $item_form += array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('container-inline'),
    ),
    '#element_validate' => array('cl_billing_pricing_field_widget_validate'),
  );

  // Construct the condition selector, which allows selection of a condition
  // group and some set of options for that group.
  $item_form['condition'] = array(
    '#type' => 'container',
  );
  $current_condition = explode(':', $current_item['condition'], 2);

  $item_form['condition']['main'] = array(
    '#type' => 'select',
    '#options' => $available_conditions['main'],
    '#default_value' => !empty($current_condition[0]) ? $current_condition[0] : '',
    '#empty_option' => t('- None -'),
  );
  // Construct the form element's name for use with the States API. Note that
  // the brackets here need to be escaped for use in a jQuery selector.
  $main_condition_name = $input_name_base . "[condition][main]";

  unset($available_conditions['main']);
  foreach ($available_conditions as $condition => $subelement) {
    $item_form['condition'][$condition] = $subelement;
    $item_form['condition'][$condition]['#states'] = array(
      'visible' => array(
        'select[name="' . $main_condition_name . '"]' => array('value' => $condition),
      ),
    );
  }

  // If there is a secondary condition value, it needs to go into the default of
  // the currently-selected condition type's extra form field. Oof.
  if (!empty($current_condition[1])) {
    $item_form['condition'][$current_condition[0]]['#default_value'] = $current_condition[1];
  }

  // Now for the action selector.
  $actions = cl_billing_pricing_actions();
  $action_options = array_map(function ($action_type) { return $action_type['label']; }, $actions);
  $default_action = (!empty($current_item['action']) ? $current_item['action'] : '');

  $item_form['action'] = array(
    '#type' => 'select',
    '#options' => $action_options,
    '#default_value' => $default_action,
    '#empty_option' => t('- None -'),
    '#states' => array(
      'invisible' => array(
        'select[name="' . $main_condition_name . '"]' => array('value' => ''),
      ),
    ),
  );

  // We can re-use the action-is-filled-in states array:
  $action_name = $input_name_base . "[action]";
  $action_visible_states = array(
    'invisible' => array(
      array('select[name="' . $main_condition_name . '"]' => array('value' => '')),
      array('select[name="' . $action_name . '"]' => array('value' => '')),
    ),
  );

  // The "values" form element is assembled based on what the selected action
  // type needs, usually some combination of amount and currency numbers. These
  // are manipulated onto the actual values key later, and back into defaults
  // for the form element below.
  $item_form['values'] = array(
    '#type' => 'container',
    '#states' => $action_visible_states,
  );
  $non_default_actions = [];
  foreach ($actions as $action_key => $action_type) {
    if (!empty($action_type['form_element'])) {
      $item_form['values'][$action_key] = $action_type['form_element'];
      // Add a proper #states to this piece of values so it only shows up when
      // its action type is selected.
      $item_form['values'][$action_key]['#states'] = array(
        'visible' => array(
          'select[name="' . $action_name . '"]' => array('value' => $action_key),
        ),
      );
      // The "default" value field will only be loaded for actions that don't
      // define their own form element.
      $non_default_actions[] = $action_key;
    }
  }

  $default_states = array();
  foreach ($non_default_actions as $action_key) {
    $default_states[] = array(
      'select[name="' . $action_name . '"]' => array('value' => $action_key),
    );
  }
  $item_form['values']['default'] = array(
    '#type' => 'textfield',
    '#size' => 5,
    '#states' => array(
      'invisible' => $default_states,
    ),
  );

  // Now we have to populate the default values for the "values" column. These
  // can only exist if an action is selected:
  if ($default_action) {
    // The default action might have its own form elements under [values]:
    if (!empty($item_form['values'][$default_action])) {
      foreach (element_children($item_form['values'][$default_action]) as $child) {
        // Here we need to restore currencies to their decimal form.
        if (!empty($item_form['values'][$default_action][$child]['#price_amount']) && !empty($current_item['values'][$child])) {
          $currency_field = $item_form['values'][$default_action][$child]['#currency_field'];
          $currency = commerce_currency_load($current_item['values'][$currency_field]);
          $default_amount = commerce_currency_amount_to_decimal($current_item['values'][$child], $currency['code']);
          $item_form['values'][$default_action][$child]['#default_value'] = number_format($default_amount, $currency['decimals'], '.', '');
        }
        else {
          $item_form['values'][$default_action][$child]['#default_value'] = $current_item['values'][$child];
        }
      }
    }
    else {
      $item_form['values']['default']['#default_value'] = $current_item['values'];
    }
  }

  // Expiry times are being stored as last second of the given date, relative to site's timezone.
  $default_date = '';
  if(!empty($current_item['expires'])) {
    $tz_user = date_default_timezone_get();
    $tz_site = variable_get('date_default_timezone', @date_default_timezone_get());
    date_default_timezone_set($tz_site);
    $default_date =  date('Y-m-d', $current_item['expires']);
    date_default_timezone_set($tz_user);
  }
  $item_form['expires'] = array(
    '#type' => 'date_popup',
    '#default_value' => $default_date,
    '#date_format' => 'Y-m-d',
    '#date_label_position' => 'within',
    '#date_year_range' => '-0:+3',
    '#states' => $action_visible_states,
  );

  $item_form['weight'] = array(
    '#type' => 'weight',
    '#default_value' => $current_item['weight'],
    '#delta' => 50,
    '#states' => $action_visible_states,
  );

  return $item_form;
}

/**
 * Implements hook_theme().
 */
function cl_billing_pricing_theme() {
  return array(
    'cl_billing_pricing_form' => array(
      'render element' => 'element',
      'file' => 'cl_billing_pricing.theme.inc',
    ),
  );
}

/**
 * Cache and return the available conditions types of pricing actions for a
 * field instance.
 */
function cl_billing_pricing_conditions($instance) {
  $cache_key = "cl_billing_pricing_conditions:$instance[entity_type]:$instance[bundle]";
  $cache = cache_get($cache_key);

  if (!$cache) {
    // We set up conditions here. The "main" array contains the initial
    // selector options, and each other key contains the corresponding form
    // element.
    $conditions['main'] = array(
      "usage" => t('Usage Group'),
      "plan" => t('Plan'),
      "product" => t('Product'),
      "custom" => t('Custom Condition'),
    );

    // Figure out which products can point to this license type.
    // If the field is on a user, the bundle will have instance settings
    // defining the license types to get plans for.
    $license_types = ($instance['entity_type'] == 'commerce_license') ? array($instance['bundle']) : $instance['settings']['license_types'];

    $options = _cl_billing_pricing_get_product_options($license_types);
    if (!empty($instance['settings']['licensable_products'])) {
      $allowed_options = $instance['settings']['licensable_products'];
      foreach ($allowed_options as $key => $option) {
        if(!empty($options[$key])) {
          $allowed_options[$key] = $options[$key];
        }
        else {
          unset($allowed_options[$key]);
        }
      }
      $options = $allowed_options;
    }
    $conditions['plan'] = array(
      '#title' => t('License Plan'),
      '#type' => 'select',
      '#options' => $options,
    );
    if (empty($options)) {
      $conditions['plan']['#empty_option'] = '- No Valid Plans -';
    }

    // To get usage groups, we create a temporary license of each type (which is
    // unsaved.)
    $groups = array();
    foreach ($license_types as $type) {
      $license = entity_create('commerce_license', array('type' => $type));
      if ($license instanceof CommerceLicenseBillingUsageGroupNamesInterface || method_exists($license, 'usageGroupNames')) {
        $groups = array_merge($groups, $license->usageGroupNames());
      }
      elseif ($license instanceof CommerceLicenseBillingUsageInterface) {
        $groups = array_merge($groups, $license->usageGroups());
      }
    }
    $group_options = array_map(function($group) { return $group['title']; }, $groups);

    $conditions['usage'] = array(
      '#title' => t('Usage Group'),
      '#type' => 'select',
      '#options' => $group_options,
    );

    // We mimic the autocomplete that would appear for products on a recurring
    // line item, because we're sneaky that way.
    $product_instance = field_info_instance('commerce_line_item', 'commerce_product', 'recurring');
    // Note that while commerce_product_reference needs to add element
    // validation to transform a SKU into a product ID and back again, we just
    // store the SKU directly as part of the condition key.
    $conditions['product'] = array(
      '#title' => 'Selected Product',
      '#type' => 'textfield',
      '#autocomplete_path' => $product_instance['widget']['settings']['autocomplete_path'] . '/commerce_line_item/commerce_product/recurring',
      '#size' => $product_instance['widget']['settings']['size'],
    );

    // The custom condition key is used to invoke a custom hook name if this
    // condition is chosen. It's a mediocre substitute for an alter hook and a
    // plugin system here.
    $conditions['custom'] = array(
      '#title' => t('Custom condition key'),
      '#type' => 'textfield',
      '#size' => 12,
    );

    // This is cleared on a general cache clear, and also whenever a product
    // entity with the "commerce_license_type" field is modified.
    cache_set($cache_key, $conditions, 'cache', CACHE_PERMANENT);
  }
  else {
    $conditions = $cache->data;
  }

  return $conditions;
}

/**
 * Implements hook_commerce_product_update().
 *
 * Used to clear the pricing conditions cache when a product that affects it was
 * modified.
 */
function cl_billing_pricing_commerce_product_update($product) {
  if (!empty($product->commerce_license_type)) {
    cache_clear_all('cl_billing_pricing_conditions', 'cache', TRUE);
  }
}

/**
 * Get a list of valid actions for the pricing options field.
 */
function cl_billing_pricing_actions() {
  // Provide enabled currencies only.
  $currencies = commerce_currencies(TRUE);
  $currency_options = array(0 => ' - ' . t('Default') . ' - ');
  $currency_options += drupal_map_assoc(array_keys($currencies));
  $options = array(
    'base_price' => array(
      'label' => t('Set Base Price'),
      'form_element' => array(
        '#type' => 'container',
        'currency_code' => array(
          '#type' => 'select',
          '#options' => $currency_options,
          '#title' => t('Currency'),
        ),
        'amount' => array(
          '#type' => 'textfield',
          '#title' => t('Amount'),
          '#size' => 10,
          '#price_amount' => TRUE,
          '#currency_field' => 'currency_code',
        ),
      ),
    ),
    'price_add' => array(
      'label' => t('Adjust Price (Flat)'),
      'form_element' => array(
        '#type' => 'container',
        'currency_code' => array(
          '#type' => 'select',
          '#options' => $currency_options,
          '#title' => t('Currency'),
        ),
        'amount' => array(
          '#type' => 'textfield',
          '#title' => t('Add Amount'),
          '#size' => 10,
          '#price_amount' => TRUE,
          '#currency_field' => 'currency_code',
        ),
      ),
    ),
    'price_multiply' => array(
      'label' => t('Modify Price (Multiply)'),
      'form_element' => array(
        '#type' => 'container',
        'amount' => array(
          '#type' => 'textfield',
          '#title' => t('Multiply By'),
          '#size' => 10,
        ),
      ),
    ),
  );

  drupal_alter('cl_billing_pricing_actions', $options);

  return $options;
}

/**
 * A helper function do display pricing actions formatted for select element.
 *
 * @return  array   Keys are machine names, values are labels.
 */
function _cl_billing_pricing_actions_options() {
  $actions = cl_billing_pricing_actions();
  $options = [];
  foreach ($actions as $key => $action) {
    $options[$key] = $action['label'];
  }

  return $options;
}

/********** Line item pricing logic **********/

/**
 * Main pricing callback for line items. Used as a rules action callback. Loops
 * through all possible pricing items defined on any license or account field to
 * which the line item belongs, checks their validity, and then applies the
 * actions for all valid items found. Also allows hooks to define other entities
 * from which related pricing rules can be gathered.
 */
function cl_billing_pricing_process_line_item($line_item) {

  // Do a bit of setup.
  $li_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
  $selected_pricing_field_items = array();
  $entities = [];
  // The names of all fields of this type which exist:
  $pricing_fields = field_read_fields(array('type' => 'cl_billing_pricing'));

  // By default, we supply the license and the account objects
  $order = $li_wrapper->order->value();
  if ($order) {
    $entities[] = ['user', $li_wrapper->order->owner->value()];
  }
  $license = $li_wrapper->cl_billing_license->value();
  if ($license) {
    $entities[] = ['commerce_license', $license];
  }

  // We allow other parts of the system to determine which entities to load
  // pricing items from as well. Each item should be a pair of the form
  // [$entity_type, $entity]. This allows other code to attach pricing
  // fields to entities other than the license and the owner, depending
  // on the line item being priced.
  drupal_alter('cl_billing_pricing_entities', $entities, $li_wrapper);

  foreach ($entities as $entity_pair) {
    list($entity_type, $entity) = $entity_pair;
    list(, , $bundle) = entity_extract_ids($entity_type, $entity);
    $current_instances = field_info_instances($entity_type, $bundle);
    foreach ($current_instances as $fieldname => $instance) {
      if (!empty($pricing_fields[$fieldname])) {
        // This is a pricing field. Grab its items and stack them.
        if ($new_pricing_field_items = field_get_items($entity_type, $entity, $fieldname)) {
          foreach ($new_pricing_field_items as $key => $pricing_field_item) {
            $pricing_field_item['component'] = $instance['settings']['component'];
            $pricing_field_item['group'] = $entity_type;
            // Check the validity of each desired pricing field item from the cl_billing_pricing field type.
            if (cl_billing_pricing_check($pricing_field_item, $li_wrapper)) {
              $selected_pricing_field_items[] = $pricing_field_item;
            }
          }
        }
      }
    }
  }

  // Sort selected pricing field items by weight.
  usort($selected_pricing_field_items, function($a, $b) { return $a['weight'] - $b['weight']; });
  // Apply pricing rules to line items.
  foreach ($selected_pricing_field_items as $pricing_field_item) {
    cl_billing_pricing_apply($pricing_field_item, $li_wrapper);
  }

  return;
}

/**
 * Check if a particular pricing field item can apply to a line item based on its
 * condition column.
 *
 * @param $pricing_field_item array
 *   A pricing field item.
 * @param $li_wrapper EntityDrupalWrapper
 *   A wrapped line item.
 * @return bool
 *   Whether this pricing field item should be applied.
 */
function cl_billing_pricing_check($pricing_field_item, $li_wrapper) {
  // Skip validity check if the pricing field item expired.
  if (!empty($pricing_field_item['expires']) && $pricing_field_item['expires'] < time()) {
    return FALSE;
  }
  // If the "custom" condition is used, then we look for a check matching
  // whatever is entered in the "custom" subfield.
  $item_conditions = explode(':', $pricing_field_item['condition']);
  if ($item_conditions[0] == COMMERCE_LICENSE_BILLING_PRICING_CUSTOM_TYPE) {
    array_shift($item_conditions);
  }
  // This is the name of the condition we need a callback for.
  $main_condition = $item_conditions[0];
  $hook = 'cl_billing_pricing_check_' . $main_condition;
  // Our implementation wins, if it exists.
  if (function_exists($hook)) {
    $cb = $hook;
  }
  elseif ($functions = module_implements($hook)) {
    $cb = reset($functions);
  }
  else {
    // No callback exists. This pricing field item cannot apply.
    return FALSE;
  }

  return call_user_func($cb, $pricing_field_item, $li_wrapper);
}

/**
 * Check a usage group pricing field item for a line item.
 *
 * @param $pricing_field_item array
 *   A pricing field item.
 * @param $li_wrapper EntityDrupalWrapper
 *   A wrapped line item.
 * @return bool
 */
function cl_billing_pricing_check_usage($pricing_field_item, $li_wrapper) {
  $condition = explode(':', $pricing_field_item['condition']);
  array_shift($condition);
  $usage_group = reset($condition);

  $price = $li_wrapper->commerce_unit_price->value();

  // We iterate over price components. The first "base_price" component we find
  // will have the CLB charge attached to its data array. Here we look for a
  // usage group name. If it matches the check passes.
  foreach ($price['data']['components'] as $comp) {
    if ($comp['name'] == 'base_price') {
      if (!empty($comp['price']['data']['charge']['usage_group'])) {
        if ($comp['price']['data']['charge']['usage_group'] == $usage_group) {
          return TRUE;
        }
      }
      return FALSE;
    }
  }
}

/**
 * Check a plan pricing field item for a line item.
 *
 * @param $pricing_field_item array
 *   A pricing field item.
 * @param $li_wrapper EntityDrupalWrapper
 *   A wrapped line item.
 * @return bool
 */
function cl_billing_pricing_check_plan($pricing_field_item, $li_wrapper) {
  if ($li_wrapper->getBundle() != 'recurring' || !$li_wrapper->cl_billing_license->value()) {
    // This isn't a real recurring line item or has no plan attached (which is
    // bad.) Fail out.
    return FALSE;
  }
  // @todo: We are exploding the same thing for a second time.
  // @todo: Something better needs to be done with $pricing_field_item array!!
  $condition = explode(':', $pricing_field_item['condition']);
  array_shift($condition);
  $product_id = reset($condition);
  if ($li_wrapper->cl_billing_license->product->raw() == $product_id) {
    // The license this line item belongs to must have a matching plan. All line
    // items which belong to the plan are adjusted -- to adjust only the plan
    // line item, use the product-matching condition.
    return TRUE;
  }

  return FALSE;
}

/**
 * Check a product pricing field item against a line item.
 *
 * @param $pricing_field_item array
 *   A pricing field item.
 * @param $li_wrapper EntityDrupalWrapper
 *   A wrapped line item.
 * @return bool
 */
function cl_billing_pricing_check_product($pricing_field_item, $li_wrapper) {
  if ($li_wrapper->getBundle() != 'recurring' || !isset($li_wrapper->commerce_product)) {
    // This isn't a real recurring line item or has no product attached somehow,
    // which is bad. Fail out.
    return FALSE;
  }
  $condition = explode(':', $pricing_field_item['condition']);
  array_shift($condition);
  // This condition type stores the SKU as part of the condition key.
  $product_sku = reset($condition);
  if ($li_wrapper->commerce_product->sku->value() == $product_sku) {
    // This condition checks the line item's actual product. Use this to price
    // individual line items independent of their owning plan or their usage
    // group.
    return TRUE;
  }

  return FALSE;
}

/**
 * Apply a pricing field item to a line item.
 *
 * @param $pricing_field_item array
 *   A pricing field item.
 * @param $li_wrapper EntityDrupalWrapper
 *   A wrapped line item.
 */
function cl_billing_pricing_apply($pricing_field_item, $li_wrapper) {
  $cb = 'cl_billing_pricing_apply_' . $pricing_field_item['action'];

  call_user_func($cb, $pricing_field_item, $li_wrapper);
}

/**
 * Apply a base pricing field item.
 *
 * @param $action array
 *   A pricing action field item.
 * @param $li_wrapper EntityDrupalWrapper
 *   A wrapped line item.
 */
function cl_billing_pricing_apply_base_price($pricing_field_item, $li_wrapper) {
  module_load_include('inc', 'commerce_line_item', 'commerce_line_item.rules');
  commerce_line_item_unit_price_currency_code($li_wrapper->value(), $pricing_field_item['values']['currency_code']);
  commerce_line_item_unit_price_amount($li_wrapper->value(), $pricing_field_item['values']['amount'], 'base_price', COMMERCE_ROUND_NONE);
}

/**
 * Apply a price add pricing field item.
 *
 * @param $pricing_field_item array
 *   A pricing field item.
 * @param $li_wrapper EntityDrupalWrapper
 *   A wrapped line item.
 */
function cl_billing_pricing_apply_price_add($pricing_field_item, $li_wrapper) {
  module_load_include('inc', 'commerce_line_item', 'commerce_line_item.rules');
  commerce_line_item_unit_price_add($li_wrapper->value(), $pricing_field_item['values']['amount'], $pricing_field_item['component'], COMMERCE_ROUND_NONE);
}

/**
 * Apply a price multiply pricing field item.
 *
 * @param $pricing_field_item array
 *   A pricing field item.
 * @param $li_wrapper EntityDrupalWrapper
 *   A wrapped line item.
 * @return bool
 */
function cl_billing_pricing_apply_price_multiply($pricing_field_item, $li_wrapper) {
  module_load_include('inc', 'commerce_line_item', 'commerce_line_item.rules');
  commerce_line_item_unit_price_multiply($li_wrapper->value(), $pricing_field_item['values']['amount'], $pricing_field_item['component'], COMMERCE_ROUND_HALF_UP);
}

function _cl_billing_pricing_get_product_options($license_types) {
  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'commerce_product')
    ->fieldCondition('commerce_license_type', 'value', $license_types, 'IN')
    ->propertyCondition('status', 1);
  $results = $efq->execute();
  $products = !empty($results['commerce_product']) ? commerce_product_load_multiple(array_keys($results['commerce_product'])) : array();
  $options = array_map(function($product) { return $product->title; }, $products);

  return $options;
}


/**
 * A minimal interface used to return the list of usage groups a license type
 * supports.
 *
 * @return An array of usage groups containing only the "title", keyed by the
 * usage group name. (I.e. the same as ->usageGroups()) but without the rest of
 * the group information.
 */
interface CommerceLicenseBillingUsageGroupNamesInterface {
  public static function usageGroupNames();
}

